// import { Component } from '@angular/core';
// import { RouterOutlet } from '@angular/router';
// import { ChatboxComponent } from './components/chatbox/chatbox.component';
// import { ChatButtonComponent } from './components/chat-button/chat-button.component';
// import { CommonModule } from '@angular/common';

// @Component({
//   selector: 'app-root',
//   standalone: true,
//   imports: [RouterOutlet, CommonModule, ChatboxComponent, ChatButtonComponent],
//   templateUrl: './app.component.html',
//   styleUrl: './app.component.css'
// })
// export class AppComponent {
//   title = 'mon-projet-angular18';
//   chatVisible = $true;
// }

import { Component, OnInit, OnDestroy } from '@angular/core';
import { RouterOutlet } from '@angular/router';
import { ChatboxComponent } from './components/chatbox/chatbox.component';
import { ChatButtonComponent } from './components/chat-button/chat-button.component';
import { PopupComponent } from './components/popup/popup.component';
import { FormPopupComponent } from './components/form-popup/form-popup.component';
import { CommonModule } from '@angular/common';
import { NotificationWebSocketService } from './services/notification-websocket.service';
import { FormPopupService } from './services/form-popup.service';
import { PopupService } from './services/popup.service';

@Component({
  selector: 'app-root',
  standalone: true,
  imports: [RouterOutlet, CommonModule, ChatboxComponent, ChatButtonComponent, PopupComponent, FormPopupComponent],
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent implements OnInit, OnDestroy {
  chatVisible = false; // √† tester avec true ou false

  constructor(
    private notificationService: NotificationWebSocketService,
    private formPopupService: FormPopupService,
    private popupService: PopupService
  ) { }

  ngOnInit() {
    console.log('üöÄ D√©marrage de l\'application');

    // Connecter les WebSockets (popup et formulaires)
    this.notificationService.connect();

    // √âcouter les notifications
    this.notificationService.notification$.subscribe(data => {
      console.log('üîî Notification re√ßue dans AppComponent:', data);
      console.log('üîî Type de la notification:', typeof data);
      console.log('üîî Cl√©s de la notification:', Object.keys(data || {}));
      console.log('üîî Inspection compl√®te:', JSON.stringify(data, null, 2));
      this.showNotification(data);
    });

    // √âcouter les formulaires depuis le service de notification
    this.notificationService.form$.subscribe(formConfig => {
      console.log('üìã Formulaire re√ßu via WebSocket de notification:', formConfig);
      this.showFormFromWebSocket(formConfig);
    });
  }

  ngOnDestroy() {
    this.notificationService.disconnect();
  }

  showNotification(data: any) {
    console.log('üéØ DEBUT showNotification avec data:', data);

    // V√©rifier si data existe
    if (!data) {
      console.warn('‚ö†Ô∏è Aucune donn√©e re√ßue dans showNotification');
      return;
    }

    // Extraire les donn√©es avec des valeurs par d√©faut
    const title = data.title || 'Notification [DEFAUT]';
    const message = data.message || 'Nouveau message [DEFAUT]';
    const type = data.type || 'info';

    console.log('üéØ Extraction:', {
      'data.title': data.title,
      'data.message': data.message,
      'title final': title,
      'message final': message,
      'type': type
    });

    // Cr√©er un message HTML plus joli selon le type
    let messageHtml = `
      <div style="text-align: left; line-height: 1.4;">
        <div style="font-size: 16px; font-weight: bold; color: #333; margin-bottom: 8px;">
          ${title}
        </div>
        <div style="font-size: 14px; color: #666;">
          ${message}
        </div>
        <div style="font-size: 12px; color: #999; margin-top: 8px; font-family: monospace;">
          Debug: type=${type}, duration=${data.duration}
        </div>
      </div>
    `;

    console.log('üéØ Message HTML final:', messageHtml);

    this.popupService.showPopup({
      message: messageHtml,
      buttons: [
        {
          text: 'OK',
          action: () => this.popupService.closePopup(),
          primary: true
        }
      ],
      showCloseButton: true
    });

    // Auto-fermer si dur√©e sp√©cifi√©e
    if (data.duration) {
      console.log('‚è∞ Auto-fermeture programm√©e dans', data.duration, 'ms');
      setTimeout(() => {
        this.popupService.closePopup();
      }, data.duration);
    }
  }

  showFormFromWebSocket(formConfig: any) {
    console.log('üìã Affichage du formulaire re√ßu via WebSocket:', formConfig);

    if (formConfig && formConfig.fields && Array.isArray(formConfig.fields)) {
      // Convertir la configuration WebSocket en format FormPopupConfig
      const formPopupConfig = {
        title: formConfig.title || 'Formulaire',
        fields: formConfig.fields,
        submitText: formConfig.submitText || 'Envoyer',
        cancelText: formConfig.cancelText || 'Annuler',
        onSubmit: (formData: any) => {
          console.log('üìù Donn√©es du formulaire soumises:', formData);

          // Envoyer la r√©ponse au processus via WebSocket
          this.sendFormResponseViaWebSocket(formData, formConfig);

          this.formPopupService.closeFormPopup();
        },
        onCancel: () => {
          console.log('‚ùå Formulaire annul√©');

          // Envoyer une r√©ponse d'annulation au processus
          this.sendFormCancelViaWebSocket(formConfig);

          this.formPopupService.closeFormPopup();
        },
        showCloseButton: true
      };

      this.formPopupService.showFormPopup(formPopupConfig);
    } else {
      console.error('‚ùå Configuration de formulaire invalide:', formConfig);
    }
  }

  // Envoyer la r√©ponse du formulaire via WebSocket
  sendFormResponseViaWebSocket(formData: any, originalFormConfig: any) {
    const response = {
      type: 'form_response',
      form_id: originalFormConfig.form_id || null,
      target_client: originalFormConfig.target_client || null,
      process_id: originalFormConfig.process_id || null, // Pour identifier le processus
      timestamp: new Date().toISOString(),
      status: 'submitted',
      responses: formData
    };

    console.log('üì§ Envoi de la r√©ponse du formulaire via WebSocket:', response);
    console.log('üîç √âtat du WebSocket formulaires:', this.notificationService.formConnectionState);
    console.log('üîç WebSocket OPEN constant:', WebSocket.OPEN);
    console.log('üîç Est connect√© formulaires:', this.notificationService.isFormConnected);

    this.notificationService.sendFormResponse(response);

    // Afficher une confirmation √† l'utilisateur
    this.popupService.showPopup({
      message: 'Formulaire envoy√© avec succ√®s !',
      buttons: [
        {
          text: 'OK',
          action: () => this.popupService.closePopup(),
          primary: true
        }
      ]
    });
  }

  // Envoyer une notification d'annulation via WebSocket
  sendFormCancelViaWebSocket(originalFormConfig: any) {
    const response = {
      type: 'form_response',
      form_id: originalFormConfig.form_id || null,
      target_client: originalFormConfig.target_client || null,
      process_id: originalFormConfig.process_id || null,
      timestamp: new Date().toISOString(),
      status: 'cancelled',
      responses: null
    };

    console.log('‚ùå Envoi de l\'annulation du formulaire via WebSocket:', response);
    this.notificationService.sendFormResponse(response);
  }  // M√©thode de test pour v√©rifier l'affichage du formulaire
  testFormPopup() {
    console.log('üß™ Test du form popup');

    const testFormConfig = {
      title: 'Formulaire de Test',
      fields: [
        {
          key: 'nom',
          label: 'Nom',
          type: 'text' as const,
          placeholder: 'Entrez votre nom',
          required: true
        },
        {
          key: 'email',
          label: 'Email',
          type: 'email' as const,
          placeholder: 'Entrez votre email',
          required: true
        },
        {
          key: 'message',
          label: 'Message',
          type: 'textarea' as const,
          placeholder: 'Entrez votre message',
          rows: 4
        }
      ],
      submitText: 'Envoyer',
      cancelText: 'Annuler',
      onSubmit: (formData: any) => {
        console.log('‚úÖ Donn√©es du formulaire de test:', formData);
        alert('Formulaire soumis avec succ√®s !');
        this.formPopupService.closeFormPopup();
      },
      onCancel: () => {
        console.log('‚ùå Formulaire de test annul√©');
        this.formPopupService.closeFormPopup();
      },
      showCloseButton: true
    };

    this.formPopupService.showFormPopup(testFormConfig);
  }

  // M√©thode pour g√©rer la r√©ouverture du chat apr√®s capture d'√©cran
  onChatReopened() {
    console.log('Chat r√©ouverture demand√©e');
    this.chatVisible = true;
  }
}

